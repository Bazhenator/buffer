// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: buffer.proto

package buffer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BufferService_AppendBuf_FullMethodName = "/buffer.BufferService/AppendBuf"
	BufferService_PopTop_FullMethodName    = "/buffer.BufferService/PopTop"
	BufferService_PopBottom_FullMethodName = "/buffer.BufferService/PopBottom"
)

// BufferServiceClient is the client API for BufferService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BufferServiceClient interface {
	AppendBuf(ctx context.Context, in *AppendBufRequest, opts ...grpc.CallOption) (*AppendBufResponse, error)
	PopTop(ctx context.Context, in *PopTopRequest, opts ...grpc.CallOption) (*PopTopResponse, error)
	PopBottom(ctx context.Context, in *PopBottomRequest, opts ...grpc.CallOption) (*PopBottomResponse, error)
}

type bufferServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBufferServiceClient(cc grpc.ClientConnInterface) BufferServiceClient {
	return &bufferServiceClient{cc}
}

func (c *bufferServiceClient) AppendBuf(ctx context.Context, in *AppendBufRequest, opts ...grpc.CallOption) (*AppendBufResponse, error) {
	out := new(AppendBufResponse)
	err := c.cc.Invoke(ctx, BufferService_AppendBuf_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bufferServiceClient) PopTop(ctx context.Context, in *PopTopRequest, opts ...grpc.CallOption) (*PopTopResponse, error) {
	out := new(PopTopResponse)
	err := c.cc.Invoke(ctx, BufferService_PopTop_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bufferServiceClient) PopBottom(ctx context.Context, in *PopBottomRequest, opts ...grpc.CallOption) (*PopBottomResponse, error) {
	out := new(PopBottomResponse)
	err := c.cc.Invoke(ctx, BufferService_PopBottom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BufferServiceServer is the server API for BufferService service.
// All implementations must embed UnimplementedBufferServiceServer
// for forward compatibility
type BufferServiceServer interface {
	AppendBuf(context.Context, *AppendBufRequest) (*AppendBufResponse, error)
	PopTop(context.Context, *PopTopRequest) (*PopTopResponse, error)
	PopBottom(context.Context, *PopBottomRequest) (*PopBottomResponse, error)
	mustEmbedUnimplementedBufferServiceServer()
}

// UnimplementedBufferServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBufferServiceServer struct {
}

func (UnimplementedBufferServiceServer) AppendBuf(context.Context, *AppendBufRequest) (*AppendBufResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendBuf not implemented")
}
func (UnimplementedBufferServiceServer) PopTop(context.Context, *PopTopRequest) (*PopTopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PopTop not implemented")
}
func (UnimplementedBufferServiceServer) PopBottom(context.Context, *PopBottomRequest) (*PopBottomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PopBottom not implemented")
}
func (UnimplementedBufferServiceServer) mustEmbedUnimplementedBufferServiceServer() {}

// UnsafeBufferServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BufferServiceServer will
// result in compilation errors.
type UnsafeBufferServiceServer interface {
	mustEmbedUnimplementedBufferServiceServer()
}

func RegisterBufferServiceServer(s grpc.ServiceRegistrar, srv BufferServiceServer) {
	s.RegisterService(&BufferService_ServiceDesc, srv)
}

func _BufferService_AppendBuf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendBufRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BufferServiceServer).AppendBuf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BufferService_AppendBuf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BufferServiceServer).AppendBuf(ctx, req.(*AppendBufRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BufferService_PopTop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PopTopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BufferServiceServer).PopTop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BufferService_PopTop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BufferServiceServer).PopTop(ctx, req.(*PopTopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BufferService_PopBottom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PopBottomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BufferServiceServer).PopBottom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BufferService_PopBottom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BufferServiceServer).PopBottom(ctx, req.(*PopBottomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BufferService_ServiceDesc is the grpc.ServiceDesc for BufferService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BufferService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "buffer.BufferService",
	HandlerType: (*BufferServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AppendBuf",
			Handler:    _BufferService_AppendBuf_Handler,
		},
		{
			MethodName: "PopTop",
			Handler:    _BufferService_PopTop_Handler,
		},
		{
			MethodName: "PopBottom",
			Handler:    _BufferService_PopBottom_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "buffer.proto",
}
